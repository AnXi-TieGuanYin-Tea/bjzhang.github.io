//dot -Tsvg cont_page_development.dot -o cont_page_development.svg
digraph cont_page_hint{
//    rankdir = LR;
    rankdir = TB;
    fontname = "Courier";
    fontsize = 12;

//    node [ fontname = "Microsoft YaHei", fontsize = 12, shape = "record", color="skyblue", style="bold"];
//    edge [ fontname = "Microsoft YaHei", fontsize = 12 ];
    node [fontsize = 12, shape = "record", color="skyblue", style="bold"];
    edge [fontsize = 12 ];

    cont_page_hint;
    a_proven_benchmark [ label = "proven benchmark"];
    b_prototype [label = "Ignore the following feature\n\
                        before the prototype works\n\
                        memcg, userfaultfd, numa, swap"];
    c_full_function [ label = "full function"];

    //a_proven_benchmark
    subgraph a_proven_benchmark {
        specint [style="filled"];

        a_proven_benchmark -> specint;
        specint -> specint_4k_page_without_transpage;
        specint -> specint_4k_page_with_transpage;
        specint -> specint_64k_page_with_hugetlb;
    }

    //b_prototype
    subgraph ba_grouping_pages {
//        label = "";
        bgcolor="mintcream";
        ba_grouping_pages [ label = "grouping pages"];
        do_not_handle_in_pte_level [ label = "Handle in higher level than\n\
                                              pte level(Only handle pte\n\
                                              in our design)", color = "gray", style="filled"]

        subgraph handle_pte_fault {
//            label = "handle_pte_fault"
            pte_invalid_when_read [ label = "pte invalid when read\n\
                                             (except s390"];
            do_fault [ label = "do_fault(Only work on\n\
                                anonymous page in our\n\
                                design", color="gray", style="filled"];
            do_anonymous_page [label = "do_anonymous_page", style="filled"];

            handle_pte_fault -> pte_inexist_in_fault_env;
            handle_pte_fault -> pte_exist_in_fault_env;

            pte_inexist_in_fault_env -> do_anonymous_page;
            pte_inexist_in_fault_env -> do_fault;

            pte_exist_in_fault_env -> write_fault;
            pte_exist_in_fault_env -> read_fault;

            do_anonymous_page -> pte_invalid_when_read;
            do_anonymous_page -> pte_invalid_when_write;

            write_fault->if_try_to_write_shared_page;
            if_try_to_write_shared_page->do_wp_page;
            if_not_try_to_write_shared_page -> mk_dirty;

            pte_invalid_when_read;
        }

        ba_grouping_pages -> do_not_handle_in_pte_level;
        ba_grouping_pages -> handle_pte_fault;

    }

    subgraph bb_spliting_64k_pages {
        bgcolor="mintcream";
        bb_spliting_64k_pages [label = "spliting 64k pages when needed: \n\
                                     e.g. mprotect, mremap, munmap, \n\
                                     LRU handling. Need add pointer to\n\
                                     track it"];
    }

    subgraph bc_set_cont_page_hint {
        bgcolor="mintcream";
        bc_set_cont_page_hint [label = "setting the cont page hint. Add\n\
                                     a function like do_fault_around.\n\
                                     invalid tlb and deal with the\n\
                                     other pages in the next time."];
    }

    cont_page_hint -> a_proven_benchmark;
    cont_page_hint -> b_prototype;
    cont_page_hint -> c_full_function;

    b_prototype -> ba_grouping_pages;
    b_prototype -> bb_spliting_64k_pages;
    b_prototype -> bc_set_cont_page_hint;
}

